let input = [
  "............",
  "........0...",
  ".....0......",
  ".......0....",
  "....0.......",
  "......A.....",
  "............",
  "............",
  "........A...",
  ".........A..",
  "............",
  "............",
];
input = [
  "...............................6.B..........P.....",
  "n..............M..................................",
  "....n.....sM7.............................6.....p.",
  "......................Mr......................P...",
  ".......n.......................................p.E",
  ".......................6...................p......",
  "r..............................C........B....P....",
  ".....................d........6......B4....P......",
  ".........................7....................4...",
  ".n......................R..............4..........",
  ".....N........S.................K.C..........4....",
  "...........N..r.....................B....K........",
  "..................................................",
  "......N.......x.............7.......K.....2....E..",
  "...................r..H........R..................",
  ".....................s....p........C...........2..",
  "....3.......................M.....................",
  "........k....................H....5...............",
  ".....x....N................d.5..y................J",
  "m.....................d7...................J......",
  ".......exk........................................",
  ".......x.............5.......R....................",
  "..........eY......................................",
  "...S.3..............................O.E...J.......",
  ".......8...H....k...............J.................",
  "......S.e.........C.H.....................X.....y.",
  "................j..........y.........2............",
  "...........e.........k............................",
  "......YS...3..............5..........K...XR.......",
  "...m..............j.s..........c..................",
  ".........................j........................",
  "...............j..................................",
  ".....m................................2...........",
  ".........Y......................................b.",
  "..................................................",
  ".......................h...........b..............",
  "............m......D..............d...............",
  "........o......D..................................",
  "...................................O..............",
  "..................................................",
  "......8...........................................",
  "........D.Y..o...................1................",
  ".....................................b..9.........",
  "........................h..0......................",
  ".....o......................h..0........b1........",
  ".........8.............X..........................",
  "..........o..........c..........1...........O.....",
  "....8....................y0...c...................",
  "..............D.......c..................9..0.....",
  "............................1..........O..9.......",
];
const height = input.length;
const width = input[0].split("").length;
let nodes = {};
let anti_nodes = [];
input.forEach((row, row_i) => {
  row.split("").forEach((col, col_i) => {
    if (col !== ".") {
      if (nodes[col]) {
        nodes[col].forEach(([row_j, col_j]) => {
          const row_diff = row_j - row_i
          const col_diff = col_j - col_i
          let first_row_pos = row_i - row_diff;
          let first_col_pos = col_i - col_diff;
          while (
            first_row_pos >= 0 &&
            first_row_pos < height &&
            first_col_pos >= 0 &&
            first_col_pos < width
          ) {
            const first_anti_node = `${first_row_pos},${first_col_pos}`
            if (!anti_nodes.includes(first_anti_node))
              anti_nodes.push(first_anti_node);

            first_row_pos -= row_diff
            first_col_pos -= col_diff
          }
          let second_row_pos = row_j + row_diff;
          let second_col_pos = col_j + col_diff;
          while (
            second_row_pos >= 0 &&
            second_row_pos < height &&
            second_col_pos >= 0 &&
            second_col_pos < width
          ) {
            const second_anti_node = `${second_row_pos},${second_col_pos}`
            if (!anti_nodes.includes(second_anti_node))
              anti_nodes.push(second_anti_node);

            second_row_pos += row_diff
            second_col_pos += col_diff
          }
        });
        nodes[col].push([row_i, col_i]);
      } else nodes[col] = [[row_i, col_i]];
    }
  });
});
for (const node in nodes) {
  nodes[node].forEach(pos => {
    const [first, sec] = pos
    const pos_string = `${first},${sec}`
    if (!anti_nodes.includes(pos_string)) anti_nodes.push(pos_string)
  });
}
console.log(anti_nodes.sort(), anti_nodes.length);
